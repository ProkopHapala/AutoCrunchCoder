import re
from collections import defaultdict
import subprocess
import json

class_file           = 'tags_classes.log'
method_file          = 'tags_methods.log'
free_function_file   = 'tags_free_functions.log'
global_variable_file = 'tags_global_variables.log'

def run_ctags(output_file, path, kinds=None, exclude=None ):
    """
    Run ctags and generate a tags file.
    :param output_file: The output tags file.
    :param kinds: The kinds of tags to generate (e.g., 'c' for classes, 'f' for functions).
    :param path: The path to the source files to be scanned.
    :param exclude: A list of directories to exclude (optional).
    """
    excludes = []
    if exclude:
        excludes = [ "--exclude="+s for s in exclude] # common_resources", "--exclude=Build", ," --exclude=Build-asan --exclude=Build-opt --exclude=Build-dbg

    with open(output_file, 'w') as f: f.write("") # Clear the output file

    #cmd = ['ctags', '-R', "--output-format=json", '--languages=C++', f'--kinds-C++={kinds}'] + excludes +[ "--extra=+fq", '-o', output_file, path]
    cmd = ['ctags', '-R', "--output-format=json", '--languages=C++'] 
    if kinds is not None: cmd.append(  f'--kinds-C++={kinds}' );
    cmd += excludes +[ '-o', output_file, path]
    print("run_ctags"," ".join(cmd))
    subprocess.run(cmd, check=True)   # Run the ctags command

# Parse a single line from a ctags file
def parse_ctags_line(line):
    parts = line.split('\t')
    if len(parts) < 4:
        return None
    
    tag_name = parts[0]
    file_name = parts[1]
    tag_kind = parts[3].strip()  # Get the type of the tag (e.g., class, function, variable)
    
    return tag_name, file_name, tag_kind

def print_file_dict(files_dict, end=None):
    for k,v in files_dict.items():
        print("\nfile: ", k)
        print('-- classes')
        for m in v['classes'  ]: print("    ", m, end=end)
        if end is not None: print()
        print('-- functions')
        for f in v['functions']: print("    ", f, end=end)  
        if end is not None: print()
        print('-- globals')
        for g in v['globals'  ]: print("    ", g, end=end)  
        if end is not None: print()

def print_class_dict(classes_dict, end=None):
    for k,v in classes_dict.items():
        print("\nclass: ", k)
        print("-- Methods:"); 
        for m in v['methods'   ]: print("   ", m, end=end)
        if end is not None: print()
        print("-- properties:"); 
        for p in v['properties']: print("   ", p, end=end)
        if end is not None: print()


def process_ctags_json(json_file):
    """
    Processes the ctags JSON output to generate a structure for files and classes.
    
    :param json_file: The path to the JSON file generated by ctags.
    :return: Two dictionaries: files_dict and classes_dict.
    """
    # Initialize dictionaries
    files_dict = defaultdict(lambda: {'classes': [], 'functions': [], 'globals': []})
    classes_dict = defaultdict(lambda: {'methods': [], 'properties': []})

    # Load the JSON data
    with open(json_file, 'r') as f:
        data = [json.loads(line) for line in f if line.startswith('{"_type": "tag"')]  # Filter only relevant tags

    # Loop through each entry in the JSON file
    for entry in data:
        file_name = entry.get('path', None)
        tag_name = entry.get('name', None)
        tag_kind = entry.get('kind', None)
        class_name = entry.get('scope', None)  # For methods and properties inside classes

        # Process based on the kind of tag
        if tag_kind == 'class':
            files_dict[file_name]['classes'].append(tag_name)
            classes_dict[tag_name]  # Initialize an entry in classes_dict for the class
        elif tag_kind == 'function':
            if class_name:
                # This is a method inside a class
                classes_dict[class_name]['methods'].append(tag_name)
            else:
                # This is a free function
                files_dict[file_name]['functions'].append(tag_name)
        elif tag_kind == 'variable':
            if class_name:
                # This is a class property
                classes_dict[class_name]['properties'].append(tag_name)
            else:
                # This is a global variable
                files_dict[file_name]['globals'].append(tag_name)

    return files_dict, classes_dict

# General function to parse any ctags file and update dictionaries
def process_ctags_file(file_path, tag_kind_to_key, files_dict, classes_dict=None):
    """
    Parse a ctags file and update the dictionaries based on the tag kind.
    
    :param file_path: The path to the ctags file.
    :param tag_kind_to_key: A mapping from tag kinds (e.g., 'f', 'v', 'c') to keys in files_dict or classes_dict.
    :param files_dict: The dictionary that holds file-level information.
    :param classes_dict: (Optional) The dictionary that holds class-level information.
    """
    with open(file_path, 'r') as f:
        file_kinds  = tag_kind_to_key['files']
        class_kinds = tag_kind_to_key['classes']
        for line in f:
            parsed = parse_ctags_line(line)
            if parsed:
                tag_name, file_name, tag_kind = parsed
                
                # For files dictionary
                if tag_kind in tag_kind_to_key['files']:
                    files_dict[file_name][file_kinds[tag_kind]].append(tag_name)
                
                # For classes dictionary, if applicable
                if classes_dict and tag_kind in tag_kind_to_key['classes']:
                    class_name_match = re.search(r'(\w+)::', tag_name)
                    if class_name_match:
                        class_name = class_name_match.group(1)
                        if class_name in classes_dict:
                            classes_dict[class_name][class_kinds[tag_kind]].append(tag_name)


def generate_ctags_files(src_path, exclude = ['common_resources', 'Build*'] ):
    """ Generate the ctags files for the given source path and exclusions. """
    run_ctags(class_file,           'c', src_path, exclude)
    run_ctags(method_file,          'm', src_path, exclude)
    run_ctags(free_function_file,   'f', src_path, exclude)
    run_ctags(global_variable_file, 'v', src_path, exclude) 
    
#
def construct_dictionaries():
    """ Build the dictionaries from the provided ctags files """
    files_dict   = defaultdict(lambda: {'classes': [], 'free_functions': [], 'global_variables': []})
    classes_dict = defaultdict(lambda: {'methods': [], 'properties': []})
    # Define the mapping for tag kinds to dictionary keys
    tag_kind_to_key = {
        'files': {
            'f': 'free_functions',  
            'v': 'global_variables',
            'c': 'classes'          
        },
        'classes': {
            'm': 'methods'           
        }
    }
    # Process each ctags file
    process_ctags_file(class_file,           tag_kind_to_key, files_dict, classes_dict)
    process_ctags_file(method_file,          tag_kind_to_key, files_dict, classes_dict)
    process_ctags_file(free_function_file,   tag_kind_to_key, files_dict)
    process_ctags_file(global_variable_file, tag_kind_to_key, files_dict)
    return files_dict, classes_dict
